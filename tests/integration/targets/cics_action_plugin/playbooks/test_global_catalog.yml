# (c) Copyright IBM Corp. 2023
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)
---
- name: Test action plugin on global catalog

  hosts: "all"
  gather_facts: false
  vars:
    catalog_name: "DFHGCD"
    catalog_path: "{{ region_data_set_path }}.{{ catalog_name }}"

  tasks:
    # #############################################################################
    # ############################## Initial cleanup ##############################
    # #############################################################################

    - name: Delete catalog data set if it exists
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ catalog_path }}"
        state: absent
      register: delete_result
      retries: 3
      until: delete_result is not failed

    - name: Assert Delete Passed
      ansible.builtin.assert:
        that:
          - delete_result.failed == false

    # #############################################################################
    # ############################## Module Testing ###############################
    # #############################################################################

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "region_data_sets required"

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          template:
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "Specify either template or dfhgcd in region_data_sets"

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          dfhgcd:
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "Specify either template or dfhgcd in region_data_sets"

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          dfhgcd:
            dsn:
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "Specify either template or dfhgcd in region_data_sets"

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "cics_data_sets required"

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
        cics_data_sets:
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "cics_data_sets required"

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
        cics_data_sets:
          template:
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "Specify either template or sdfhload in cics_data_sets"

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
        cics_data_sets:
          sdfhload:
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "Specify either template or sdfhload in cics_data_sets"

    - name: Create global catalog invalid params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
        cics_data_sets:
          sdfhload:
          template:
      register: result
      ignore_errors: true
    - name: Assert global failed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is true
          - result.msg == "Specify either template or sdfhload in cics_data_sets"

    - name: Create global catalog good params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
        cics_data_sets:
          template: "{{ cics_install_path }}.<< lib_name >>"
      register: result
    - name: Assert global passed
      ansible.builtin.assert:
        that:
          - result.changed is true
          - result.failed is false

    - name: Create global catalog good params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: "initial"
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
        cics_data_sets:
          template: "{{ cics_install_path }}.<< lib_name >>"
      register: result
    - name: Assert global passed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is false

    - name: Create global catalog good params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: absent
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
        cics_data_sets:
          template: "{{ cics_install_path }}.<< lib_name >>"
      register: result
    - name: Assert global passed
      ansible.builtin.assert:
        that:
          - result.changed is true
          - result.failed is false

    - name: Create global catalog good params
      environment: "{{ environment_vars }}"
      ibm.ibm_zos_cics.global_catalog:
        state: absent
        region_data_sets:
          template: "{{ region_data_set_path }}.<< data_set_name >>"
        cics_data_sets:
          template: "{{ cics_install_path }}.<< lib_name >>"
      register: result
    - name: Assert global passed
      ansible.builtin.assert:
        that:
          - result.changed is false
          - result.failed is false
